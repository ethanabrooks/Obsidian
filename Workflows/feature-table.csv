Workflow,Category,Impact (1-5),Evaluation Ease (1-5),Requires Agentic AI (True/False),Priority Score,Notes
Update outdated READMEs and docstrings,Code Health (broad visibility),5,1,True,5,"Subjective evaluation, harder to automate assessment"
Ensure private methods start with _,Code Health,1,5,False,5,"Doesn't require AI"
Identify blocking functions that should be async,Code Health,3,1,True,3,"High impact but harder to evaluate automatically"
Identify pathological DB interactions,Code Health,5,1,True,5,"Very high impact but requires deep understanding of system"
Add readme files to packages,Code Health (broad visibility),5,1,True,5,"Easy to evaluate but moderate impact"
Auto-review human PRs,Process Optimization,5,1,True,5,"Very high impact but subjective evaluation"
Auto-review bug reports/issues,Process Optimization,5,1,True,5,"High impact but subjective evaluation"
Close obsolete issues,Issue Management,3,1,True,3,"Requires understanding issue context and codebase changes"
Reconcile @anyio and @pytest.asyncio,Code Health,1,5,False,5,"Can be evaluated by counting decorator usage before/after, relatively mechanical"
Modernize typevar syntax,Code Health,1,5,False,5,"Mechanical transformation, easily evaluated by regex patterns"
Change typing imports to collections.abc,Code Health,1,5,False,5,"Straightforward replacement, easily evaluated"
Remove async from non-awaiting functions,Code Health,1,3,False,3,"Doesn't require AI"
Add issue IDs for existing TODOs,Issue Management,3,1,True,3,"Hard to evaluate whether the issue was assigned correctly"
Clean up obsolete code/configs,Code Health (broad visibility),3,3,True,9,"Impact varies by project, requires understanding dependencies not captured by static analysis"
Optimize resource usage for Online RL,Process Optimization,5,5,True,25,"High impact but evaluation requires benchmarking"
Check OWNERS are up-to-date,Process Optimization,3,5,False,15,"Can compare with git blame statistics"
Identify relevant PR reviewers,Process Optimization,1,5,False,5,"Impact on review quality, harder to evaluate objectively"
Maintain package TOC with owners,Process Optimization,1,1,True,1,"Moderate impact, relatively easy to evaluate completeness"
Debug/investigate broken tests,Process Optimization,5,5,True,25,"High impact but success metrics vary by project"
Google Checks compliance monitoring,Process Optimization,5,3,True,15,"I need to learn more about Google Checks"
Mark @override @final @abstractmethod correctly,Code Health,1,5,True,5,"Requires understanding class hierarchies, can be evaluated by static analysis"
Update path strings to pathlib.PurePath,Code Health,1,5,True,5,"Main challenge would be updating code that uses the function"
Vet code with security scanning tools,Code Health,5,5,True,25,"High impact, tools provide clear metrics for evaluation"
Fix # type: ignore comments,Code Health (broad visibility),3,5,True,15,"Can be evaluated statically and by counting comments before/after"
Replace Any with specific types,Code Health (broad visibility),3,5,True,15,"High impact for type safety, can count Any usages before/after"
Check for dependency updates,Code Health (broad visibility),5,5,True,25,"High impact for security, clear metrics from tools"
Find and update deprecated usages,Code Health (broad visibility),5,5,True,25,"Can be evaluated by counting deprecated API usage"
Auto-resolve linting issues in PRs,Process Optimization,5,5,True,25,"High impact for developer productivity, clear success metrics"
